//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "endpoint")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub url: String,
    pub method: String,
    pub group_id: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::group::Entity",
        from = "Column::GroupId",
        to = "super::group::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Group,
    #[sea_orm(has_many = "super::request::Entity")]
    Request,
    #[sea_orm(has_many = "super::sessions_to_endpoints::Entity")]
    SessionsToEndpoints,
}

impl Related<super::group::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Group.def()
    }
}

impl Related<super::request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Request.def()
    }
}

impl Related<super::sessions_to_endpoints::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SessionsToEndpoints.def()
    }
}

impl Related<super::session::Entity> for Entity {
    fn to() -> RelationDef {
        super::sessions_to_endpoints::Relation::Session.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::sessions_to_endpoints::Relation::Endpoint.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
